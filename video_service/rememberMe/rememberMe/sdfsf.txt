import base64
import cv2
import numpy as np
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

class ImageRequest(BaseModel):
    image: str  # Base64-encoded string

@app.post("/receive_image")
async def receive_image(request: ImageRequest):
    try:
        # Decode the base64 string
        image_data = base64.b64decode(request.image)
        np_arr = np.frombuffer(image_data, np.uint8)
        img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        if img is None:
            raise ValueError("Decoded image is None")

        # Process the image (example: add a rectangle overlay)
        processed_img = img.copy()
        cv2.rectangle(processed_img, (100, 100), (500, 500), (0, 255, 0), 2)

        # Encode the processed image to base64
        _, buffer = cv2.imencode('.jpg', processed_img)
        processed_image_base64 = base64.b64encode(buffer).decode('utf-8')

        return {
            "message": "Image processed successfully",
            "processed_image": processed_image_base64
        }

    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error processing image: {str(e)}")